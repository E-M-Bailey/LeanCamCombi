import Mathlib.Analysis.Convex.Normed
import Mathlib.Analysis.NormedSpace.AddTorsorBases

open AffineBasis FiniteDimensional Metric Set
open scoped Pointwise Topology

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  {s : Set E} {x : E}

/-- We can intercalate a polyhedron between a point and one of its neighborhoods. -/
lemma exists_mem_interior_convexHull_finset (hs : s ‚àà ùìù x) :
    ‚àÉ t : Finset E, x ‚àà interior (convexHull ‚Ñù t : Set E) ‚àß convexHull ‚Ñù t ‚äÜ s := by
  classical
  wlog hx : x = 0
  ¬∑ obtain ‚ü®t, ht‚ü© := this (s := -x +·µ• s) (by simpa using vadd_mem_nhds (-x) hs) rfl
    use x +·µ• t
    simpa [subset_set_vadd_iff, mem_vadd_set_iff_neg_vadd_mem, convexHull_vadd, interior_vadd]
      using ht
  subst hx
  obtain ‚ü®b‚ü© := exists_affineBasis_of_finiteDimensional
    (Œπ := Fin (finrank ‚Ñù E + 1)) (k := ‚Ñù) (P := E) (by simp)
  obtain ‚ü®Œµ, hŒµ, hŒµs‚ü© := Metric.mem_nhds_iff.1 hs
  set u : Finset E := -Finset.univ.centroid ‚Ñù b +·µ• Finset.univ.image b
  have hu‚ÇÄ : 0 ‚àà interior (convexHull ‚Ñù u : Set E) := by
    simpa [u, convexHull_vadd, interior_vadd, mem_vadd_set_iff_neg_vadd_mem]
      using b.centroid_mem_interior_convexHull
  have hu : u.Nonempty := Finset.nonempty_iff_ne_empty.2 fun h ‚Ü¶ by simp [h] at hu‚ÇÄ
  have hunorm : (u : Set E) ‚äÜ closedBall 0 (u.sup' hu (‚Äñ¬∑‚Äñ) + 1) := by
    simp only [subset_def, Finset.mem_coe, mem_closedBall, dist_zero_right, ‚Üê sub_le_iff_le_add,
      Finset.le_sup'_iff]
    exact fun x hx ‚Ü¶ ‚ü®x, hx, by simp‚ü©
  set Œµ' : ‚Ñù := Œµ / 2 / (u.sup' hu (‚Äñ¬∑‚Äñ) + 1)
  have hŒµ' : 0 < Œµ' := by
    dsimp [Œµ']
    obtain ‚ü®x, hx‚ü© := id hu
    have : 0 ‚â§ u.sup' hu (‚Äñ¬∑‚Äñ) := Finset.le_sup'_of_le _ hx (norm_nonneg _)
    positivity
  set t : Finset E := Œµ' ‚Ä¢ u
  have hŒµ‚ÇÄ : 0 < Œµ / 2 := by positivity
  have htnorm : (t : Set E) ‚äÜ closedBall 0 (Œµ / 2) := by
    simp [t, Set.set_smul_subset_iff‚ÇÄ hŒµ'.ne', hŒµ‚ÇÄ.le, _root_.smul_closedBall, abs_of_nonneg hŒµ'.le]
    simpa [Œµ',  hŒµ‚ÇÄ.ne'] using hunorm
  refine ‚ü®t, ?_, ?_‚ü©
  ¬∑ simpa [t, interior_smul‚ÇÄ, convexHull_smul, zero_mem_smul_set_iff, hŒµ'.ne']
  calc
    convexHull ‚Ñù t ‚äÜ closedBall 0 (Œµ / 2) := convexHull_min htnorm (convex_closedBall ..)
    _ ‚äÜ ball 0 Œµ := closedBall_subset_ball (by linarith)
    _ ‚äÜ s := hŒµs
