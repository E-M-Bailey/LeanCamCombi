/-
Copyright (c) 2023 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathlib.Analysis.Convex.Intrinsic
import Mathlib.Analysis.Convex.Topology
import Mathlib.Analysis.InnerProductSpace.PiL2

/-!
# Convex functions are continuous

This file proves that a convex function from a finite dimensional real inner product space to `‚Ñù` is
continuous.

## TODO

Can this be extended to real normed spaces?
-/

namespace Real
variable {Œµ r : ‚Ñù}

open Metric

lemma closedBall_eq_segment (hŒµ : 0 ‚â§ Œµ) : closedBall r Œµ = segment ‚Ñù (r - Œµ) (r + Œµ) := by
  rw [closedBall_eq_Icc, segment_eq_Icc ((sub_le_self _ hŒµ).trans $ le_add_of_nonneg_right hŒµ)]

end Real

section pi
variable {ùïú Œπ : Type*} {E : Œπ ‚Üí Type*} [Fintype Œπ] [LinearOrderedField ùïú]
  [Œ† i, AddCommGroup (E i)] [Œ† i, Module ùïú (E i)] {s : Set Œπ} {t : Œ† i, Set (E i)} {f : Œ† i, E i}

lemma mem_convexHull_pi (h : ‚àÄ i ‚àà s, f i ‚àà convexHull ùïú (t i)) : f ‚àà convexHull ùïú (s.pi t) :=
  sorry -- See `mk_mem_convexHull_prod`

@[simp] lemma convexHull_pi (s : Set Œπ) (t : Œ† i, Set (E i)) :
    convexHull ùïú (s.pi t) = s.pi (fun i ‚Ü¶ convexHull ùïú (t i)) :=
  Set.Subset.antisymm (convexHull_min (Set.pi_mono fun _ _ ‚Ü¶ subset_convexHull _ _) $ convex_pi $
    fun _ _ ‚Ü¶ convex_convexHull _ _) fun _ ‚Ü¶ mem_convexHull_pi

end pi

section
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  {s : Set E} {x : E}

open FiniteDimensional Metric Set
open scoped BigOperators

/-- We can intercalate a polyhedron between an intrinsically open set and one of its elements,
namely a small enough cube. -/
lemma IsOpen.exists_mem_intrinsicInterior_convexHull_finset
  (hs : IsOpen ((‚Üë) ‚Åª¬π' s : Set $ affineSpan ‚Ñù s)) (hx : x ‚àà s) :
  ‚àÉ t : Finset E, x ‚àà intrinsicInterior ‚Ñù (convexHull ‚Ñù (t : Set E)) ‚àß
    convexHull ‚Ñù (t : Set E) ‚äÜ s := by
  classical
  lift x to affineSpan ‚Ñù s using subset_affineSpan _ _ hx
  set x : affineSpan ‚Ñù s := x with hx
  clear_value x
  subst hx
  obtain ‚ü®Œµ, hŒµ, hŒµx‚ü© := (Metric.nhds_basis_closedBall.1 _).1 (isOpen_iff_mem_nhds.1 hs _ hx)
  set f : Finset (Fin $ finrank ‚Ñù $ vectorSpan ‚Ñù s) ‚Üí vectorSpan ‚Ñù s :=
    fun u ‚Ü¶ (Œµ / ‚àë i, ‚ÄñfinBasis ‚Ñù (vectorSpan ‚Ñù s) i‚Äñ) ‚Ä¢ ‚àë i, if i ‚àà u then
      finBasis ‚Ñù (vectorSpan ‚Ñù s) i else -finBasis ‚Ñù (vectorSpan ‚Ñù s) i
      with hf
  sorry
  -- set t := Finset.univ.image (fun u, f u +·µ• x) with ht,
  -- refine ‚ü®t, _, (convexHull_min _ $ convex_closedBall _ _).trans hŒµx‚ü©,
  -- { have hf' : isOpen_map (fun w : fin (finrank ‚Ñù E) ‚Üí ‚Ñù, x + ‚àë i, w i ‚Ä¢ finBasis ‚Ñù E i) := sorry,
  --   refine interior_maximal _ (hf' _ isOpen_ball) ‚ü®0, mem_ball_self zero_lt_one,
  --     by simp only [pi.zero_apply, zero_smul, Finset.sum_const_zero, add_zero]‚ü©,
  --   rw image_subset_iff,
  --   refine ball_subset_closedBall.trans _,
  --   simp_rw [closedBall_pi _ zero_le_one, Real.closedBall_eq_segment zero_le_one,
  --     ‚Üê convexHull_pair, ‚Üê convexHull_pi, pi.zero_apply, zero_sub, zero_add, ht, Finset.coe_image,
  --     Finset.coe_univ, image_univ],
  --   refine convexHull_min (fun w hw, subset_convexHull _ _ _) _,
  --   refine ‚ü®Finset.univ.filter (fun i ‚Ü¶ w i = 1), _‚ü©,
  --   sorry,
  --   refine (convex_convexHull _ _).is_linear_preimage _, -- rather need bundled affine preimage
  --   sorry,
  -- },
  -- { have hŒµ' : 0 ‚â§ Œµ / finrank ‚Ñù E := by positivity,
  --   simp_rw [ht, Finset.coe_image, Finset.coe_univ,image_univ, range_subset_iff, mem_closedBall,
  --     dist_self_add_left],
  --   rintro u,
  --   have hE : 0 ‚â§ ‚àë i, ‚ÄñfinBasis ‚Ñù E i‚Äñ := Finset.sum_nonneg (fun x hx, norm_nonneg _),
  --   simp_rw [hf, norm_smul, Real.norm_of_nonneg (div_nonneg hŒµ.le hE), div_mul_comm Œµ,
  --     mul_le_iff_le_one_left hŒµ],
  --   refine div_le_one_of_le ((norm_sum_le _ _).trans $ Finset.sum_le_sum fun i _, _) hE,
  --   rw [apply_ite norm, norm_neg, if_t_t] }

end

open FiniteDimensional Metric Set

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  {s : Set E} {f : E ‚Üí ‚Ñù}

-- TODO: This proof actually gives local Lipschitz continuity.
-- See `IsOpen.exists_mem_interior_convexHull_finset` for more todo.
protected lemma ConvexOn.continuousOn (hf : ConvexOn ‚Ñù s f) :
  ContinuousOn f (intrinsicInterior ‚Ñù s) := by
  classical
  -- refine isOpen_interior.continuousOn_iff.2 (fun x hx, _),
  -- obtain ‚ü®t, hxt, hts‚ü© := isOpen_interior.exists_mem_interior_convexHull_finset hx,
  -- set M := t.sup' (convexHull_nonempty_iff.1 $ nonempty.mono interior_subset ‚ü®x, hxt‚ü©) f,
  -- refine metric.continuous_at_iff.2 (fun Œµ hŒµ, _),
  -- have : f x ‚â§ M := le_sup_of_mem_convexHull
  --   (hf.subset (hts.trans interior_subset) $ convex_convexHull _ _) (interior_subset hxt),
  -- refine ‚ü®Œµ / (M - f x), _, fun y hy, _‚ü©,
  -- sorry,
  sorry

protected lemma ConcaveOn.continuousOn (hf : ConcaveOn ‚Ñù s f) :
  ContinuousOn f (intrinsicInterior ‚Ñù s) :=
sorry
